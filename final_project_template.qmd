---
title: "Final Project Template"
author: Sam Lee
output: pdf_document
---

```{=html}
<style type="text/css">
h1.title {
font-size: 40px;
text-align: center;
}
h4.author {
font-size: 40px;
text-align: center;
}
</style>
```
\newpage

```{r setup, include=FALSE}
library(tidyverse)
library(lubridate)
library(GGally)
library(corrplot)
library(patchwork)
library(car)
library(ggfortify)
library(alr4)
library(glmnet)
library(robustbase)
library(broom)

set.seed(12022023)

seoul <- read.csv("SeoulBikeData.csv", header=F, skip=1) %>% setNames(
  c("Date", "RentedBikeCount", "Hour", "Temperature", "Humidity", "WindSpeed",
    "Visibility", "DewPointTemp", "SolarRadiation", "Rainfall", "Snowfall",
    "Seasons", "Holiday", "FunctioningDay")
) %>% as_tibble() %>%
  mutate(
    Date = dmy(Date),
    Time = ymd_h(paste(Date, Hour)),
    IsAutumn = 1*as.numeric(Seasons == "Autumn"),
    IsSummer = 1*as.numeric(Seasons == "Summer"),
    IsWinter = 1*as.numeric(Seasons == "Winter"),
    IsSpring = 1*as.numeric(Seasons == "Spring"),
    IsHoliday = 1*as.numeric(Holiday == "Holiday"),
    Hour09 = 1*(Hour %in% 0:9),
    Hour1015 = 1*(Hour %in% 10:15),
    Hour1624 = 1*(Hour %in% 16:24),
    RentedBikeCount = log(RentedBikeCount+1)
  ) %>% arrange(Time)
```

# Abstract

Here, you will briefly summarize the entire report, including the data used, questions of interest, and relevant findings.

# 1 Problem and Motivation

In this section, you will describe the background information about the study that is necessary to understand why the data are important. In other words, why was it important to gather the data in the first place?

## 1.1 Data Description

In this analysis we used data from UC Irvine's Machine Learning's Repository. We accessed [Seoul Bike Sharing Data](https://archive.ics.uci.edu/dataset/560/seoul+bike+sharing+demand), which contains 8,760 rows of hourly data pertaining to the corresponding amount of rented bikes (bike demand) in Seoul, Korea. It also contains corresponding data for the respective temperature (celcius), humidity (%), wind speed (m/s), visibility (10m), dew point temperature (celcius), solar radiation (MJ/$m^2$, rainfall precipitation (mm), snowfall precipitation (cm), seasons (Winter, Spring, Summer, Autumn), and an indicator determining whether the corresponding day is a holiday.

We will use these variables along with a subset of interaction terms which will be determined by lasso regression to include in our models.

Briefly state the source of your data and describe the relevant variables that **you will use** in your project. Include important details such as units for the different variables, and what the \`\`observational units" (rows in the data set) represent (e.g., individuals, countries, etc.)

## 1.2 Questions of Interest

Briefly and clearly state the two main questions that you will investigate throughout the report. These questions should be stated in scientific, and not statistical language. For example, "Is the slope of log of per capita GDP significantly different from zero?" should instead by give as "Does the log of per capita GDP have an effect on the average life expectancy of females in a given country?"

1.  Can we use factors in weather and time to determine the best predictors of short-run for fluctuations in temperature for the climate in Seoul, Korea? If there are predictive factors, which one has the largest influence? 

2.  Can we determine which weather and time factors affect the bike sharing demand the most in Seoul, Korea?

## 1.3 Regression Methods

For each question of interest listed in Section 2, describe what regression models, techniques, and tools you will use to fully answer it. These should include any plots you will use for exploratory analysis or diagnostic checks, as well as methods of inference you will use.

In order to estimate the short-run fluctuations in temperature we used a first-differences regression model. We hypothesized that since there are seasonal effects that are unobservable in our data set the error term, $\epsilon$ is composed of a season-specific error term, $\alpha_{s}$ and other random effects that also vary by the time period ($t$). Hence, $\epsilon_{st} = \alpha_{s} + \eta_{st}$. Let $s$ denote the season and $t$ denote time. For our data set-specific purposes, we will seek to understand how $\text{Temperature}_{st}$ changes with respect to each season and hour ($t$).

Hence, for our simple multivariate regression model, if

$\text{Temperature}_{st} = \beta_0 + \beta_1\text{Humidity}_{st} + \beta_2\text{DewPointTemp}_{st} + \beta_3\text{WindSpeed}_{st} + \beta_4\text{SolarRadiation}_{st} + \beta_5\text{Rainfall}_{st} + \beta_6\text{Snowfall}_{st} + \beta_7I(0 \leq \text{Hour}_t < 10) + \beta_8I(10 \leq \text{Hour}_t < 16) + \alpha_{s} + \eta_{st}$

Then,

$\text{Temperature}_{st-1} = \beta_0 + \beta_1\text{Humidity}_{st-1} + \beta_2\text{DewPointTemp}_{st-1} + \beta_3\text{WindSpeed}_{st-1} + \beta_4\text{SolarRadiation}_{st-1} + \beta_5\text{Rainfall}_{st-1} + \beta_6\text{Snowfall}_{st-1} + \beta_7I(0 \leq \text{Hour}_{t-1} < 10) + \beta_8I(10 \leq \text{Hour}_{t-1} < 16) + \alpha_{s} + \eta_{st-1}$

Thus, we wish to estimate,

$\Delta\text{Temperature}_{st} = \beta_1\Delta\text{Humidity}_{st} + \beta_2\Delta\text{DewPointTemp}_{st} + \beta_3\Delta\text{WindSpeed}_{st} + \beta_4\Delta\text{SolarRadiation}_{st} + \beta_5\Delta\text{Rainfall}_{st} + \beta_6\Delta\text{Snowfall}_{st} + \beta_7\Delta I(0 \leq \text{Hour}_t < 10) + \beta_8 \Delta I(10 \leq \text{Hour}_t < 16) + \Delta\eta_{st}$

This eliminates the $t-1$ temperature dependency (and all other lagged dependencies for $t-1$ in our independent variable matrix $X$) and isolates the short-run change in temperature, which is what we seek to estimate.

After lasso regression with all the necessary interaction terms included, we reduced our model down to a more parsimonious one,

$\Delta\text{Temperature}_{st} = \beta_1\Delta\text{Humidity}_{st} + \beta_2\Delta\text{DewPointTemp}_{st} + \beta_3\Delta\text{WindSpeed}_{st}+\beta_4\Delta\text{SolarRadiation}_{st}+\beta_5\Delta I(0 \leq \text{Hour}_t < 10) + \beta_6\Delta I(10 \leq \text{Hour}_t < 16) + \beta_7\Delta\text{SolarRadiation}_{st}I(10 \leq \text{Hour}_t < 16) + \Delta\eta_{st}$

---

In order to estimate the hourly demand for bike sharing in Seoul. Similar to our model for temperature, we have unobserved seasonal effects in $\epsilon$. However, exploratory data analysis has shown that current bike demand is not strongly dependent on the bike demand from $t-1$. Instead of using a first-difference approach, we will use a fixed effects models to include the seasonal effects for $s-1$ (3) seasons to obtain unbiased estimates. We will use Spring as our base season.

We transformed $\text{RentedBikeCount}_{st}$ with a $ln$ transformation. Upon further analysis, we also transformed $\text{Visibility}_{st}$ with a $f(x)=-\sqrt{x}$ transformation. We also noticed that different levels of $\text{Humidity}_{st}$ were affecting $\text{RentedBikeCount}_{st}$ in a non-linear fashion. Hence, we created 10 different levels for humidity as dummy variables, omitting the 0-10% level as the base level. We also noticed that extreme levels of $\text{WindSpeed}_{st}$ were also affecting $\text{RentedBikeCount}_{st}$. We created another variable, $I(\text{WindSpeed}_{st} > \phi(\text{WindSpeed}_s,0.95))$

Hence, our basic fixed effects multivariate model for measuring the demand for rented bikes in Seoul will be interpreted as,

$ln(\text{RentedBikeCount}_{st}+1) = \beta_0 + \beta_1I(10 \leq Humidity_t < 20) + ... + \beta9I(90 \leq Humidity_t < 100) + \beta_{10}\text{Temperature}_{st} + \beta_{11}\text{WindSpeed}_{st} + \beta_{12}(-\sqrt{\text{Visibility}_{st}}) + \beta_{13}I(\text{ExtremeWind}_{st} = \text{Yes}) + \beta_{14}\text{DewPointTemp}_{st} + \beta_{15}\text{SolarRadiation}_{st} + \beta_{16}\text{Rainfall}_{st} + \beta_{17}\text{Snowfall}_{st} + \beta_{18}I(\text{Day}_t = Holiday) + \beta_{19}I(\text{Hour}_t = 1) + ... + \beta_{41}I(\text{Hour}_t = 23) + \beta_{42}I(\text{Season}_s = Winter) + \beta_{43}I(\text{Season}_s = Summer) + \beta_{44}I(\text{Season}_s = Autumn) + \eta_{st}$

# 2 Analyses, Results, and Interpretation

Conduct the analysis in a logical fashion, including necessary code (and not any superfluous code) and its output. Give simple interpretations of your findings related to the questions of interest.

```{r}
seasons = unique(seoul$Seasons)
Temp = seoul[c("Time", "Temperature", "Seasons")]

season.base = "IsSpring"
season.dummies = setdiff(c("IsWinter", "IsSpring", "IsSummer", "IsAutumn"), season.base)

time.base = "Hour1624"
time.dummies = setdiff(c("Hour09", "Hour1015"), time.base)

seoul.factors = c("Temperature", "Humidity", "DewPointTemp",
                  "WindSpeed", "Visibility", "SolarRadiation", "Rainfall",
                  "Snowfall", time.dummies)

seoul.change = c()

for(factor in seoul.factors){
  change_factor = str_c(factor, "Change")
  seoul.change = c(seoul.change, change_factor)
  seoul[change_factor] = NA_real_
  for(s in seasons){
    seoul.subset = seoul %>% filter(Seasons == s)
    seoul[seoul$Seasons == s, change_factor] = seoul.subset[factor]-lag(seoul.subset[factor], n=1)
  }
}

seoul.interaction = c()
seoul.base = c(time.base)

#All 2d Interaction Effects
continuous_interactions = combn(setdiff(seoul.change, 
                                        c(str_c(time.dummies, "Change"),
                                          str_c(season.dummies, "Change"),
                                          "TemperatureChange")), 2)
for(i in 1:ncol(continuous_interactions)){
  factor = paste(continuous_interactions[,i], collapse = "X")
  seoul.interaction = c(seoul.interaction, factor)
  seoul[factor] = NA_real_
  for(s in seasons){
    seoul.subset = seoul %>% filter(Seasons == s)
    seoul[seoul$Seasons == s, factor] = seoul.subset[continuous_interactions[1,i]]*
                                        seoul.subset[continuous_interactions[2,i]]
  }
}

#Time Interaction Effects
for(factor in setdiff(seoul.change, 
                      c(str_c(time.dummies, "Change"),
                        "TemperatureChange"))){
  for(time in str_c(time.dummies, "Change")){
    factor.interaction = str_c(factor, "X", time)
    seoul.interaction = c(seoul.interaction, factor.interaction)
    seoul[factor.interaction] = NA_real_
    for(s in seasons){
      seoul.subset = seoul %>% filter(Seasons == s)
      seoul[seoul$Seasons == s, factor.interaction] = seoul.subset[factor]*
                                                      seoul.subset[time]
    }
  }
}

###### Rented Bike Count Model

time.bike = c()
for(h in unique(seoul$Hour)){
  factor = str_c("Hour", h)
  seoul[factor] = as.numeric(seoul$Hour == h)
  time.bike = c(time.bike, factor)
}
time.bike.base = "Hour0"
time.bike = setdiff(time.bike, time.bike.base)

a = 1 #1 is excluded for base dummy
time.humidities = str_c("Humidity",setdiff(1:10, a))
for(h in 1:length(time.humidities)){
  h.min = (h-1+a)*10
  h.max = (h+a)*10
  seoul[time.humidities[h]] = 1*(seoul$Humidity >= h.min &
                                 seoul$Humidity < h.max)
}

bike.dummies = c("IsHoliday")
seoul.bike.factors = c("RentedBikeCount", time.humidities, "Temperature",
                       "WindSpeed", "Visibility", "DewPointTemp",
                       "SolarRadiation", "ExtremeWind",
                       "Rainfall", "Snowfall", bike.dummies, time.bike,
                       season.dummies)

seoul$ExtremeWind = 1*(seoul$WindSpeed > quantile(seoul$WindSpeed, 0.95))

#Transform Visibility
seoul$Visibility = -sqrt(seoul$Visibility)

seoul.bike.interaction = c()
seoul.bike.base = c(time.bike.base)


continuous_interactions_bike = combn(setdiff(seoul.bike.factors, 
                                        c(time.bike, season.dummies,
                                          time.humidities,
                                          "RentedBikeCount")), 2)
for(i in 1:ncol(continuous_interactions_bike)){
  factor = paste(continuous_interactions_bike[,i], collapse = "X")
  seoul.bike.interaction = c(seoul.bike.interaction, factor)
  seoul[factor] = seoul[continuous_interactions_bike[1,i]]*
                  seoul[continuous_interactions_bike[2,i]]
}

for(factor in setdiff(seoul.bike.factors,
                        c(time.bike, season.dummies, "RentedBikeCount"))){
  for(time in time.bike){
    factor.interaction = str_c(factor, "X", time)
    seoul.bike.interaction = c(seoul.bike.interaction, factor.interaction)
    seoul[factor.interaction] = seoul[factor]*seoul[time]
  }
}

#Seasonal Interactions
for(factor in setdiff(seoul.bike.factors,
                        c(season.dummies, "RentedBikeCount"))){
  for(s in season.dummies){
    factor.interaction = str_c(factor, "X", s)
    seoul.bike.interaction = c(seoul.bike.interaction, factor.interaction)
    seoul[factor.interaction] = seoul[factor]*seoul[s]
  }
}

#Humidity and Other Weather Effects
for(factor in setdiff(seoul.bike.factors,
                        c(time.bike, season.dummies,
                                          time.humidities,
                                          "RentedBikeCount"))){
  for(humidity in time.humidities){
    factor.interaction = str_c(factor, "X", humidity)
    seoul.bike.interaction = c(seoul.bike.interaction, factor.interaction)
    seoul[factor.interaction] = seoul[factor]*seoul[humidity]
  }
}

seoul[complete.cases(seoul[seoul.change]), ] -> seoul.temp
```

```{r message=FALSE, fig.width=8}
corrplot(cor(seoul[seoul.bike.factors]), type = "upper")
corrplot(cor(seoul.temp[seoul.change]), type="upper")

seoul.temp %>% ggplot()+
  geom_point(aes(x=Hour, y=TemperatureChange))+
  facet_grid(~Seasons)

threshold = 0
seoul %>% mutate(IsPrecip=(Rainfall+Snowfall) > threshold) %>% ggplot()+
  geom_point(aes(x=Hour, y=RentedBikeCount, color=IsPrecip))+
  facet_grid(~Seasons)

seoul %>% ggplot()+
  geom_point(aes(x=Hour, y=RentedBikeCount, color=FunctioningDay))+
  facet_grid(~Seasons)
seoul %>% 
  filter(FunctioningDay == "Yes") -> seoul

seoul.temp %>% ggplot()+
  geom_boxplot((aes(y=TemperatureChange, x=Seasons)))

seoul.temp %>% ggplot()+
  geom_point(aes(x=DewPointTempChange, y=TemperatureChange))+
  facet_grid(Hour09+Hour1015~Seasons)
```

```{r}
# create_season_models = function(factors, response, base=F){
#   factors = setdiff(factors, response)
#   if(base == T){
#     f = 0
#   } else {
#     f = paste(c(0, factors), collapse = " + ")
#   }
#   
#   models <- map(unique(seoul$Seasons), function(x){
#     lm(formula(paste(response, "~", f)), 
#        data = seoul[seoul$Seasons == x,] %>% 
#          select(all_of(c(factors, response))))
#   })
#   
#   names(models) <- str_c("seoul.lm.", unique(seoul$Seasons))
#   return(models)
# }
# 
# models.lm = create_season_models(seoul.change, "TemperatureChange")
# 
# for(model in models.lm){
#   print(summary(model))
# }

seoul.lm = lm(TemperatureChange ~ 0 + ., data=seoul.temp[seoul.change])
summary(seoul.lm)

seoul.bike.lm = lm(RentedBikeCount ~ ., data=seoul[seoul.bike.factors])
summary(seoul.bike.lm)
```

```{r message=F}
avPlots(seoul.lm)
avPlots(seoul.bike.lm)
```

```{r figsize=12}
autoplot(seoul.lm) +
  theme(aspect.ratio = 1)

autoplot(seoul.bike.lm) +
  theme(aspect.ratio = 1)
```

```{r}
show_leverage = function(model){
  cd_cont_pos <- function(leverage, level, model) {
    sqrt(level * length(coef(model)) * (1 - leverage) / leverage)
  }
  cd_cont_neg <- function(leverage, level, model) {
    -cd_cont_pos(leverage, level, model)
  }
  
  cd_threshold <- 0.5
  cd_threshold2 <- 4 / (nrow(seoul) - 2)
  x_max_val <- 0.35
  
  autoplot(model, which = 5, nrow = 1, ncol = 1) +
    theme(aspect.ratio = 1) +
    stat_function(fun = cd_cont_pos,
                  args = list(level = cd_threshold, model = model),
                  xlim = c(0, x_max_val), lty = 2, colour = "#FFACEE") +
    stat_function(fun = cd_cont_neg,
                  args = list(level = cd_threshold, model = model),
                  xlim = c(0, x_max_val), lty = 2, colour = "#FFACEE") +
    stat_function(fun = cd_cont_pos,
                  args = list(level = cd_threshold2, model = model),
                  xlim = c(0, x_max_val), lty = 2, colour = "#AFDFFF") +
    stat_function(fun = cd_cont_neg,
                  args = list(level = cd_threshold2, model = model),
                  xlim = c(0, x_max_val), lty = 2, colour = "#AFDFFF")
}

show_leverage(seoul.lm)
show_leverage(seoul.bike.lm)
```

```{r}
model.factors = setdiff(c(seoul.change, seoul.interaction), c(seoul.base, "TemperatureChange"))

seoul.x = as.matrix(seoul.temp[model.factors])
seoul.y = as.matrix(seoul.temp["TemperatureChange"])

lasso_cv <- cv.glmnet(x = seoul.x,
                      y = seoul.y, 
                      type.measure = "mse", 
                      alpha = 1)

d = coef(lasso_cv, s = "lambda.1se")[2:(length(model.factors)-1)]
lasso.factors = c(model.factors[which(d != 0)], "Hour1015")
seoul.lasso = lm(TemperatureChange ~ 0 + .,
                                       seoul.temp[c("TemperatureChange",
                                       lasso.factors)])

print(summary(seoul.lasso))

singularities = c("SolarRadiationXHour1", "SolarRadiationXHour2", "SolarRadiationXHour3",
                  "SnowfallXIsFunctioningDay", "SolarRadiationXHour4",
                  "SolarRadiationXHour5", "SolarRadiationXHour20", "SolarRadiationXHour21",
                  "SolarRadiationXHour22", "SolarRadiationXHour23", "SnowfallXIsSummer",
                  "SnowfallXIsAutumn")
model.bike.factors = setdiff(c(seoul.bike.factors, seoul.bike.interaction), 
                             c(seoul.bike.base, "RentedBikeCount", singularities))

seoul.bike.x = as.matrix(seoul[model.bike.factors])
seoul.bike.y = as.matrix(seoul["RentedBikeCount"])

lasso_cv <- cv.glmnet(x = seoul.bike.x,
                      y = seoul.bike.y, 
                      type.measure = "mse", 
                      alpha = 1)

d = coef(lasso_cv, s = "lambda.1se")[2:(length(model.bike.factors)-1)]
lasso.bike.factors = model.bike.factors[which(d != 0)]
seoul.bike.lasso = lm(RentedBikeCount ~ .,
                                       seoul[c("RentedBikeCount",
                                       lasso.bike.factors)])

print(summary(seoul.bike.lasso))

# seoul.bike.base.model = lm(RentedBikeCount ~ 1, seoul[c("RentedBikeCount", model.bike.factors)])
# seoul.bike.full.model = lm(RentedBikeCount ~ ., seoul[c("RentedBikeCount", model.bike.factors)])
# 
# seoul.bike.step = step(seoul.bike.base.model,
#                        direction = "both",
#                        k = log(nrow(seoul)),
#                        scope = list(lower=seoul.bike.base.model,
#                                     upper=seoul.bike.full.model))
# 
# print(summary(seoul.bike.step))

# seoul.base.models = create_season_models(model.factors,
#                                          "TemperatureChange",
#                                          base = T)
#   
# seoul.full.models = create_season_models(model.factors,
#                                          "TemperatureChange")
# 
# 
# #Stepwise BIC
# create_season_stepwise = function(base_models, 
#                                   full_models){
#   models = list()
#   for(m in 1:length(base_models)){
#     base.model = base_models[[m]]
#     full.model = full_models[[m]]
#     season = unique(seoul$Seasons)[m]
#     
#     models[[str_c("seoul.stepwise.",season)]] <- step(base.model,
#          direction="both",
#          k = log(nrow(seoul[seoul$Seasons == season,])),
#          scope=list(lower=base.model,
#                      upper=full.model))
#   }
#   return(models)
# }
# 
# seoul.stepwise.bic.models = create_season_stepwise(seoul.base.models,
#                                                    seoul.full.models)

# for(model in seoul.stepwise.bic.models){
#   print(summary(model))
# }
  
# summary(seoul.stepwise.bic)
# length(seoul.stepwise.bic$coefficients)
# 
# seoul$step.residuals = seoul.stepwise.bic$residuals
#
# create_lasso = function(){
#   models = list()
#   seasons = seoul$Seasons %>% unique()
#   for(s in seasons){
#     #print(s)
#     seoul.subset = seoul %>% filter(Seasons == s)
#     seoul.x = as.matrix(seoul.subset[model.factors])
#     seoul.y = as.matrix(seoul.subset["TemperatureChange"])
#   
#     lasso_cv <- cv.glmnet(x = seoul.x,
#                           y = seoul.y, 
#                           type.measure = "mse", 
#                           alpha = 1)
#   
#     d = coef(lasso_cv, s = "lambda.1se")[2:(length(model.factors)-1)]
#     lasso.factors = model.factors[which(d != 0)]
#     models[[str_c("seoul.lasso.",s)]] = lm(TemperatureChange ~ 0 + .,
#                                            seoul.subset[c("TemperatureChange",
#                                            lasso.factors)])
#   }
#   return(models)
# }
# seoul.lasso.models = create_lasso()
# for(model in seoul.lasso.models){
#   print(summary(model))
# }


```

```{r}
# epsilon = 0.5
# t = seoul %>% filter(abs(RainfallChange) >= epsilon) %>% mutate(
#   RainfallChange = RainfallChange + abs(min(RainfallChange)) + 1,
#   TemperatureChange = TemperatureChange #+ abs(min(TemperatureChange)) + 1
# )
# 
# t %>% ggplot()+
#   geom_point(aes(x=RainfallChange, y=TemperatureChange))
# 
# # t$Rainfall = t$Rainfall^1.5
# invTranPlot(TemperatureChange ~ RainfallChange, data=t, lambda = c(-1, -0.5, 0, 0.5, 1), optimal=T)
# bc = boxCox(t$TemperatureChange ~ t$Rainfall)
# lambda = bc$x[which(bc$y == max(bc$y))]
# lambda
# t$TemperatureChange = t$TemperatureChange^2
# 
# invTranPlot(TemperatureChange ~ RainfallChange, data=t, lambda = c(-1, -0.5, 0, 0.5, 1), optimal=T)
# 
# t %>% ggplot()+
#   geom_point(aes(x=RainfallChange, y=TemperatureChange))
# 
# invTranPlot(TemperatureChange ~ Rainfall, data=t, lambda = c(-1, -0.5, 0, 0.5, 1), optimal=T)
# 
# t = seoul %>% mutate(
#     SnowfallChange = SnowfallChange + abs(min(SnowfallChange)) + 1,
#     TemperatureChange = TemperatureChange + abs(min(TemperatureChange)) + 1
# )
# invTranPlot(TemperatureChange ~ SnowfallChange, data=t, lambda = c(-1, -0.5, 0, 0.5, 1), optimal=T)
# 
# seoul %>% ggplot()+
#   geom_point(aes(x=SnowfallChange, y=TemperatureChange))
# 
# snowfall.lm = lm(TemperatureChange ~ Snowfall, data=t)
# summary(snowfall.lm)
# 
# seoul %>% mutate(
#   Snowfall = ifelse(
#     Snowfall == 0, 0,
#     predict(snowfall.lm, seoul)
#   )
# )
# 
# seoul %>% mutate(
#   IsRainDifference = abs(RainfallChange) >= epsilon,
#   IsSnowing = ifelse(
#     Snowfall == 0, 0,
#     predict(snowfall.lm, seoul)
#   )
# )
```

```{r}
# for(effect in weather_effects){
#   for(hour in hours){
#     factor = str_c(effect, "X", hour)
#     seoul.factors = c(seoul.factors, factor)
#     seoul[factor] = seoul[effect]*seoul[hour]
#     seoul.interaction = c(seoul.interaction, factor)
#   }
# }
```

```{r}
# seoul.interaction.lm = lm(TemperatureChange ~ ., seoul[setdiff(seoul.factors, seoul.base)])
# seoul$interaction.residuals = seoul.interaction.lm$residuals
# summary(seoul.interaction.lm)
```

```{r}
# resid_vs_hour09 <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Hour09, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_hour1015 <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Hour1015, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_humidity <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Humidity, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_windspeed <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = WindSpeed, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_visibility <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Visibility, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_solarradiation <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = SolarRadiation, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_rainfall <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Rainfall, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_snowfall <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Snowfall, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_issummer <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = IsSummer, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_iswinter <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = IsWinter, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_isspring <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = IsSpring, y = interaction.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_hour09
# resid_vs_hour1015
# resid_vs_humidity
# resid_vs_windspeed
# resid_vs_visibility
# resid_vs_solarradiation
# resid_vs_rainfall
# resid_vs_snowfall
# resid_vs_issummer
# resid_vs_iswinter
# resid_vs_isspring
```

```{r}
# resid_vs_hour09 <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Hour09, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_hour1015 <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Hour1015, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_humidity <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Humidity, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_windspeed <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = WindSpeed, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_solarradiation <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = SolarRadiation, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_rainfall <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Rainfall, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_snowfall <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = Snowfall, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_issummer <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = IsSummer, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_iswinter <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = IsWinter, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_isspring <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = IsSpring, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# ### Interaction Effects
# 
# resid_vs_sxh10 <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = SolarXHour1015, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_sxs <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = SolarXIsSummer, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_sxh09 <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = SolarXHour09, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_hxh09 <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = HumidityXHour09, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_sxw <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = SolarXIsWinter, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# resid_vs_sxsp <- ggplot(data = seoul) +
#   geom_point(mapping = aes(x = SolarXIsSpring, y = step.residuals)) +
#   theme(aspect.ratio = 1)
# 
# 
# resid_vs_hour09
# resid_vs_hour1015
# resid_vs_humidity
# resid_vs_windspeed
# resid_vs_solarradiation
# resid_vs_rainfall
# resid_vs_snowfall
# resid_vs_issummer
# resid_vs_iswinter
# resid_vs_isspring
# 
# resid_vs_sxh09
# resid_vs_sxh10
# resid_vs_sxs
# resid_vs_sxsp
# resid_vs_sxw
# resid_vs_hxh09
```

```{r}
# for(m in 1:length(seoul.lasso.models)){
#   model = models[[m]] 
#   plot = autoplot(model) +
#     ggtitle(unique(seoul$Seasons)[m]) +
#     theme(aspect.ratio = 1)
#   print(plot)
# }

autoplot(seoul.lasso)
autoplot(seoul.bike.lasso)
```

```{r}
show_leverage(seoul.lasso)
show_leverage(seoul.bike.lasso)
```

```{r}
seoul.temp.leverage = augment(seoul.lasso)
seoul.temp.leverage$d = cooks.distance(seoul.lasso, type = "pearson")
seoul.temp.leverage %>%
  filter(d < 0.5) -> seoul.temp.leverage

seoul.lasso = lm(TemperatureChange ~ 0 + .,
                                       seoul.temp.leverage[c("TemperatureChange",
                                       lasso.factors)])

summary(seoul.lasso)


autoplot(seoul.lasso)

t = seoul.temp %>% mutate(
  HumidityChange = HumidityChange + abs(min(HumidityChange)) + 1,
  DewPointTempChange = DewPointTempChange + abs(min(DewPointTempChange)) + 1,
  SolarRadiationChange = SolarRadiationChange + abs(min(SolarRadiationChange)) + 1,
  WindSpeedChange = WindSpeedChange + abs(min(WindSpeedChange)) + 1
)

invTranPlot(TemperatureChange ~ SolarRadiationChange, data=t, lambda = c(-1, -0.5, 0, 0.5, 1, 2), optimal=T)
bc = boxCox(t$TemperatureChange ~ t$Rainfall)
lambda = bc$x[which(bc$y == max(bc$y))]
lambda
t$TemperatureChange = t$TemperatureChange^2


seoul.temp$WindSpeedChange = log(seoul.temp$WindSpeedChange + abs(min(seoul.temp$WindSpeedChange)) + 1)
seoul.temp$SolarRadiationChange = seoul.temp$SolarRadiationChange^2

seoul.lasso.lm = lm(TemperatureChange ~ 0 + .,
                                       seoul.temp.leverage[c("TemperatureChange",
                                       lasso.factors)])
summary(seoul.lasso.lm)

# seoul.full.lm = lm(TemperatureChange ~ ., seoul.temp[c("TemperatureChange", model.factors)])
# summary(seoul.full.lm)
autoplot(seoul.full.lm)
```

# 3 Conclusions

<!-- $\Delta \text{Temperature}_t = \beta_0 + \beta_1I(0\leq\text{Hour}_t<10) + \beta_2I(10\leq\text{Hour}_t<16) + \beta_3\text{Humidity}_t + \beta_4\text{WindSpeed}_t + \beta_5\text{Visibility}_t + \beta_6\text{SolarRadiation}_t + \beta_7\text{Snowfall}_t +\beta_8I(\text{Season}_t = \text{Winter}) + \beta_9I(\text{Season}_t = \text{Summer}) + \beta_{10}\text{SolarRadiation}_tI(\text{Season}_t = \text{Spring}) + \beta_{11}\text{SolarRadiation}_tI(\text{Season}_t = \text{Winter}) + \beta_{12}\text{SolarRadiation}_tI(\text{Season}_t = \text{Summer}) + \beta_{13}\text{SolarRadiation}_tI(0\leq\text{Hour}_t<10) + \beta_{14}\text{WindSpeed}_tI(0\leq\text{Hour}_t<10) + \beta_{15}\text{WindSpeed}_tI(10\leq\text{Hour}_t<15) + \beta_{16}\text{Visibility}_tI(0\leq\text{Hour}_t<10) + \beta{17}\text{Rainfall}_tI(0\leq\text{Hour}_t<10) + \beta{18}\text{Rainfall}_tI(11\leq\text{Hour}_t<16) + \beta{19}\text{Snowfall}_tI(0\leq\text{Hour}_t<10) + \epsilon_i$ -->

$\epsilon_i \overset{iid}{\sim} N(0, \sigma^2)$

Give additional context to you results and interpretations from Section 5 with respect to the data set and its purpose. Describe any potential weaknesses in your analysis, and how they may affect the reliability of the results.

```{r fig.width=12}
seoul.temp$PredictedTemperatureChange = predict(seoul.lasso, seoul.temp)
seoul.temp$PredictedTemperature = NA_real_

seoul.temp$residual = seoul.temp$PredictedTemperatureChange-seoul.temp$TemperatureChange

epsilon = 100
influential_points = seoul.temp %>% arrange(desc(abs(residual))) %>% 
  head(epsilon)

#influential_points %>% View()

influential.factors = tibble(
  Magnitude = c(),
  Factor = c(),
  Rank = c()
)

for(i in 1:nrow(influential_points)){
  point = influential_points[i,lasso.factors]
  
  factors = seoul.lasso$coefficients[1:length(seoul.lasso$coefficients)]*t(point)
  
  factors %>% as.data.frame() %>% arrange(desc(abs(V1))) %>%
    setNames("Magnitude") %>%
    rownames_to_column(var = "Factor") %>%
    mutate(
      Rank = length(lasso.factors):1
    ) -> factors
  
  influential.factors = influential.factors %>% rbind(factors)
}

influential.factors %>% mutate(
  AbsoluteMagnitude = abs(Magnitude)
) %>% group_by(Factor) %>%
  summarize(
    avg_magnitude = mean(AbsoluteMagnitude),
    avg_rank = mean(Rank)
  ) %>% arrange(desc(avg_rank)) -> influential.factors

top.influential.factors = influential.factors %>% head(6)

for(factor in top.influential.factors$Factor){
  hist(influential_points[factor] %>% unlist(), main=factor)
}
```

```{r}
for(s in seasons){
  temp = Temp %>% filter(Seasons == s) %>% pull(Temperature) %>%
    lag(n=1)
  temp = temp[!is.na(temp)]
  seoul.temp[seoul.temp$Seasons == s,]$PredictedTemperature =
    seoul.temp[seoul.temp$Seasons == s,]$PredictedTemperatureChange +
    temp
}

seoul.temp %>%
  ggplot()+
  geom_line(aes(x=Time, y=TemperatureChange, color="Actual"), alpha=1)+
  geom_line(aes(x=Time, y=PredictedTemperatureChange,
                color="Predicted"), alpha=0.6)+
  labs(title="Predicted Temperature Change in Seoul Over Time",
       color=NULL)+
  xlab("Time")+
  ylab(expression(Delta~Temperature))

seoul.temp %>%
  ggplot()+
  geom_line(aes(x=Time, y=Temperature, color="Actual"), alpha=1)+
  geom_line(aes(x=Time, y=PredictedTemperature,
                color="Predicted"), alpha=0.6)+
  labs(title="Predicted Temperature in Seoul Over Time",
       color=NULL)+
  xlab("Time")+
  ylab(expression(Temperature))

```

```{r message=F, warning=F}
seoul$PredictedRentedBikeCount = predict(seoul.bike.lasso, seoul)
seoul$residual = seoul$PredictedRentedBikeCount - seoul$RentedBikeCount

#step.factors = seoul.bike.step$coefficients %>% names() %>% setdiff("(Intercept)")

epsilon = 100
influential_points = seoul %>% arrange(desc(abs(residual))) %>% 
  head(epsilon)

#influential_points %>% View()

influential.factors = tibble(
  Magnitude = c(),
  Factor = c(),
  Rank = c()
)

for(i in 1:nrow(influential_points)){
  point = influential_points[i,lasso.bike.factors]
  
  factors = seoul.bike.lasso$coefficients[2:length(seoul.bike.lasso$coefficients)]*t(point)
  
  factors %>% as.data.frame() %>% arrange(desc(abs(V1))) %>%
    setNames("Magnitude") %>%
    rownames_to_column(var = "Factor") %>%
    mutate(
      Rank = length(lasso.bike.factors):1
    ) -> factors
  
  influential.factors = influential.factors %>% rbind(factors)
}

influential.factors %>% mutate(
  AbsoluteMagnitude = abs(Magnitude)
) %>% group_by(Factor) %>%
  summarize(
    avg_magnitude = mean(AbsoluteMagnitude),
    avg_rank = mean(Rank)
  ) %>% arrange(desc(avg_rank)) -> influential.factors

top.influential.factors = influential.factors %>% head(6)

for(factor in top.influential.factors$Factor){
  hist(influential_points[factor] %>% unlist(), main=factor)
}

seoul %>% ggplot(aes(x=Humidity, y=RentedBikeCount))+
  geom_point()+
  geom_smooth(method="lm", se=F)+
  facet_grid(~Seasons)

seoul %>% filter(Seasons=="Autumn") %>% ggplot(aes(x=Humidity))+
  geom_bar()

seoul %>% ggplot(aes(x=Visibility, y=RentedBikeCount))+
  geom_point()+
  geom_smooth(method="lm", se=F)+
  facet_grid(~Seasons)

seoul %>% ggplot(aes(x=WindSpeed, y=RentedBikeCount))+
  geom_point()+
  geom_smooth(method="lm", se=F)+
  facet_grid(~Seasons)

t = seoul %>%
  mutate(
    Humidity = Humidity + 1,
    Visibility = Visibility + 1,
    WindSpeed = WindSpeed + 1,
  )

invTranPlot(RentedBikeCount ~ WindSpeed, data=t, lambda = c(-1, -0.5, 0, 0.5, 1), optimal=T)
```

```{r}
seoul %>% 
  ggplot()+
  geom_line(aes(x=Time, y=exp(RentedBikeCount)-1, color="Actual"), alpha=1)+
  geom_line(aes(x=Time, y=exp(PredictedRentedBikeCount)-1,
                color="Predicted"), alpha=0.3)+
  facet_grid(~factor(seoul$Seasons, levels=c("Winter", "Spring", "Summer", "Autumn")), scales="free_x")+
  labs(title="Predicted Bike Demand in Seoul Over Time",
       color=NULL)+
  xlab("Time")+
  ylab("Rented Bike Count")+
  theme(axis.text.x = element_text(angle = 45, hjust = 0, vjust = 0))
```

# 4 Contributions

For each member of the group, write a short paragraph describing their contribution to this project and the report. It is up to you to decide how to divide up the work, so long as everyone is contributing approximately equally.

## APPENDIX

If there are any analyses, such as exploratory plots/summaries or work you did to determine appropriate transformations, or any relevant material that does not belong in one of the sections above, these can go in the Appendix. If you don't have any material like this, you can remove this section.
